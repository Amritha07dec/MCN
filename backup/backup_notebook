{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bbaa7e68-1077-4d99-94b2-c0dc4c022348",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "import yaml\n",
    "\n",
    "from scipy.integrate import solve_ivp\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0880aa1f-26fe-4792-a499-8812e4c7ea67",
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate_ode_system(rhs_func, t_span, y0, params, solver='RK45', t_eval=None):\n",
    "    \"\"\"\n",
    "    Simulate the ODE system.\n",
    "\n",
    "    Parameters:\n",
    "    - rhs_func: The right-hand side of the ODE as a function of (t, y, params).\n",
    "    - t_span: Tuple (t_0, t_final), the time span for the simulation.\n",
    "    - y0: Initial conditions as an array.\n",
    "    - params: Parameters required by the rhs_func.\n",
    "    - solver: The ODE solver method ('RK45', 'RK23', 'DOP853', 'LSODA', etc.).\n",
    "    - t_eval: Array of time points at which to store the solution.\n",
    "\n",
    "    Returns:\n",
    "    - sol: Solution object containing times and states.\n",
    "    \"\"\"\n",
    "    # Define the ODE system as a lambda function to pass the parameters\n",
    "    def ode_func(t, y):\n",
    "        return rhs_func(t, y, params)\n",
    "\n",
    "    # Solve the ODE system\n",
    "    sol = solve_ivp(ode_func, t_span, y0, method=solver, t_eval=t_eval)\n",
    "    \n",
    "    return sol\n",
    "\n",
    "\n",
    "# Updated phase space plot function\n",
    "def plot_phase_space(sol, state_indices=(0, 1, 2)):\n",
    "    \"\"\"\n",
    "    Plots the phase space of the solution. Automatically switches to 3D if there are more than two states.\n",
    "    \n",
    "    Args:\n",
    "    sol: Solution object from the ODE solver (such as the one returned by scipy's solve_ivp).\n",
    "    state_indices: Tuple specifying which state variables to plot (default is (0, 1)).\n",
    "                   For a 3D plot, pass 3 indices, for example (0, 1, 2).\n",
    "    \"\"\"\n",
    "    y = sol.y\n",
    "    num_states = y.shape[0]\n",
    "    \n",
    "    # 2D phase space\n",
    "    if num_states == 2 or len(state_indices) ==2:\n",
    "        plt.figure(figsize=(8, 6))\n",
    "        plt.plot(y[state_indices[0]], y[state_indices[1]], lw=0.8)\n",
    "        plt.xlabel(f\"State {state_indices[0]}\")\n",
    "        plt.ylabel(f\"State {state_indices[1]}\")\n",
    "        plt.title(\"2D Phase Space\")\n",
    "        plt.grid(True)\n",
    "        plt.show()\n",
    "    \n",
    "    # 3D phase space if the system has more than two states\n",
    "    elif len(state_indices) == 3 and num_states >= 3:\n",
    "        fig = plt.figure(figsize=(10, 8))\n",
    "        ax = fig.add_subplot(111, projection='3d')\n",
    "        ax.plot(y[state_indices[0]], y[state_indices[1]], y[state_indices[2]], lw=0.8)\n",
    "        ax.set_xlabel(f\"State {state_indices[0]}\")\n",
    "        ax.set_ylabel(f\"State {state_indices[1]}\")\n",
    "        ax.set_zlabel(f\"State {state_indices[2]}\")\n",
    "        ax.set_title(\"3D Phase Space\")\n",
    "        plt.show()\n",
    "    \n",
    "    else:\n",
    "        print(\"State indices must be 2 or 3 for phase space plotting.\")\n",
    "def plot_trajectories(sol):\n",
    "    \"\"\"\n",
    "    Plot the trajectories of all state variables over time.\n",
    "    \n",
    "    Parameters:\n",
    "    - sol: Solution object from solve_ivp.\n",
    "    \"\"\"\n",
    "    plt.figure(figsize=(8, 6))\n",
    "    for i in range(sol.y.shape[0]):\n",
    "        plt.plot(sol.t, sol.y[i], label=f'State {i}')\n",
    "    plt.xlabel('Time')\n",
    "    plt.ylabel('State Variables')\n",
    "    plt.title('State Variables Over Time')\n",
    "    plt.legend()\n",
    "    plt.grid(True)\n",
    "    plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9603295d-1b03-409f-944f-6e03763ad53b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Updated Dictionary to store ODE systems\n",
    "ode_systems = {\n",
    "    'Lorenz': {\n",
    "        'DCF_values': ['Poly', 0, 0],\n",
    "        'rhs_function': lambda t, y, params: [\n",
    "            params[0] * (y[1] - y[0]),                  # dx/dt = sigma * (y - x)\n",
    "            y[0] * (params[1] - y[2]) - y[1],           # dy/dt = x * (rho - z) - y\n",
    "            y[0] * y[1] - params[2] * y[2]              # dz/dt = x * y - beta * z\n",
    "        ],\n",
    "        'parameters_and_IC': [\n",
    "            ([10.0, 28.0, 8.0 / 3.0], [1.0, 1.0, 1.0], 'chaotic'),     # Chaotic behavior\n",
    "            ([10.0, 15.0, 8.0 / 3.0], [0.5, 0.5, 0.5], 'fixed_point'),      # fixed_point\n",
    "            ([10.0, 100.0, 8.0 / 3.0], [2.0, 2.0, 2.0], 'chaotic')     # Chaotic with different initial conditions\n",
    "        ]\n",
    "    },\n",
    "    'Van_der_Pol': {\n",
    "        'DCF_values': ['Poly', 0, 0],\n",
    "        'rhs_function': lambda t, y, params: [\n",
    "            y[1],                                       # dx/dt = y\n",
    "            params[0] * (1 - y[0]**2) * y[1] - y[0]     # dy/dt = mu * (1 - x^2) * y - x\n",
    "        ],\n",
    "        'parameters_and_IC': [\n",
    "            ([0.5], [1.0, 0.0], 'cyclic'),              # Cyclic for small mu\n",
    "            ([1.0], [0.0, 1.0], 'cyclic'),              # Moderate mu, cyclic\n",
    "            ([10.0], [2.0, 0.0], 'cyclic'),             # Larger mu, slower periodicity\n",
    "            ([20.0], [0.1, 0.1], 'cyclic')              # Very large mu, still cyclic\n",
    "        ]\n",
    "    },\n",
    "    'Rossler': {\n",
    "        'DCF_values': ['Poly', 0, 0],\n",
    "        'rhs_function': lambda t, y, params: [\n",
    "            -y[1] - y[2],                               # dx/dt = -y - z\n",
    "            y[0] + params[0] * y[1],                    # dy/dt = x + a * y\n",
    "            params[1] + y[2] * (y[0] - params[2])       # dz/dt = b + z * (x - c)\n",
    "        ],\n",
    "        'parameters_and_IC': [\n",
    "            ([0.2, 0.2, 5.7], [1.0, 1.0, 1.0], 'chaotic'),  # Classic chaotic behavior\n",
    "            ([0.1, 0.1, 6.0], [0.5, 0.5, 0.5], 'cyclic'),  # Cyclic with modified parameters\n",
    "            ([0.2, 0.2, 10.0], [1.0, 0.0, 0.0], 'chaotic') # Chaotic with higher c\n",
    "        ]\n",
    "    },\n",
    "    'Lorenz96': {\n",
    "        'DCF_values': ['Poly', 0, 0],\n",
    "        'rhs_function': lambda t, y, params: [\n",
    "            (y[(i+1) % params[1]] - y[i-2]) * y[i-1] - y[i] + params[0]\n",
    "            for i in range(params[1])\n",
    "        ],  # N-dimensional Lorenz-96 system\n",
    "        'parameters_and_IC': [\n",
    "            ([10.0, 4], [0.0, 1.0, 2.0, 3.0], 'cyclic'),               # 4D cyclic system\n",
    "            ([12.0, 6], [1.0, 0.5, 0.5, 0.5, 1.0, 0.0], 'chaotic')     # 6D chaotic system\n",
    "        ]\n",
    "    },\n",
    "    'Linear_1D': {\n",
    "        'DCF_values': ['Poly', 0, 0],\n",
    "        'rhs_function': lambda t, y, params: [params[0] * y[0]],  # Single state: dx/dt = a * x (no cyclic behavior)\n",
    "        'parameters_and_IC': [\n",
    "            ([0.5], [1.0], 'growth'),   # Exponential growth\n",
    "            ([-0.5], [1.0], 'decay'),   # Exponential decay\n",
    "        ]\n",
    "    },\n",
    "    'Linear_2D_Harmonic_Oscillator': {\n",
    "        'DCF_values': ['Poly', 0, 0],\n",
    "        'rhs_function': lambda t, y, params: [\n",
    "            y[1],            # dx/dt = y\n",
    "            -params[0] * y[0]  # dy/dt = -omega^2 * x\n",
    "        ],\n",
    "        'parameters_and_IC': [\n",
    "            ([1.0], [1.0, 0.0], 'cyclic (simple harmonic oscillator)'),   # Cyclic behavior (ω = 1)\n",
    "            ([0.25], [1.0, 0.0], 'cyclic (slower oscillation)'),         # Slower cyclic behavior (ω = 0.5)\n",
    "        ]\n",
    "    },\n",
    "    'Linear_3D_Coupled_Oscillators': {\n",
    "        'DCF_values': ['Poly', 0, 0],\n",
    "        'rhs_function': lambda t, y, params: [\n",
    "            params[0] * y[1],  # dx1/dt = a * x2\n",
    "            params[1] * y[2],  # dx2/dt = b * x3\n",
    "            -params[2] * y[0]  # dx3/dt = -c * x1\n",
    "        ],\n",
    "        'parameters_and_IC': [\n",
    "            ([1.0, 1.0, 1.0], [1.0, 0.0, 0.0], 'cyclic'),   # Cyclic with clear oscillations\n",
    "            ([0.5, 0.5, 0.5], [1.0, 1.0, 1.0], 'slower cyclic')  # Slower oscillatory behavior\n",
    "        ]\n",
    "    },\n",
    "    'Linear_4D_Coupled_Oscillators': {\n",
    "        'DCF_values': ['Poly', 0, 0],\n",
    "        'rhs_function': lambda t, y, params: [\n",
    "            params[0] * y[1],  # dx1/dt = a * x2\n",
    "            params[1] * y[2],  # dx2/dt = b * x3\n",
    "            params[2] * y[3],  # dx3/dt = c * x4\n",
    "            -params[3] * y[0]  # dx4/dt = -d * x1\n",
    "        ],\n",
    "        'parameters_and_IC': [\n",
    "            ([1.0, 1.0, 1.0, 1.0], [1.0, 0.0, 0.0, 0.0], 'cyclic'),   # Cyclic behavior with balanced coupling\n",
    "            ([0., 0.5, 0.5, 0.5], [1.0, 0.0, 0.0, 0.0], 'slower cyclic')  # Slower cyclic behavior\n",
    "        ]\n",
    "    },\n",
    "    'Linear_5D_Coupled_Oscillators': {\n",
    "        'DCF_values': ['Poly', 0, 0],\n",
    "        'rhs_function': lambda t, y, params: [\n",
    "            params[0] * y[1],  # dx1/dt = a * x2\n",
    "            params[1] * y[2],  # dx2/dt = b * x3\n",
    "            params[2] * y[3],  # dx3/dt = c * x4\n",
    "            params[3] * y[4],  # dx4/dt = d * x5\n",
    "            -params[4] * y[0]  # dx5/dt = -e * x1\n",
    "        ],\n",
    "        'parameters_and_IC': [\n",
    "            ([1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 0.0, 0.0, 0.0, 0.0], 'cyclic'),  # Cyclic with clear oscillations\n",
    "            ([0.5, 0.5, 0.5, 0.5, 0.5], [1.0, 110.0, 110.0, 10.0, -20.0], 'slower cyclic')  # Slower cyclic behavior\n",
    "        ]\n",
    "    },\n",
    "    'Duffing_Oscillator': {\n",
    "        'DCF_values': ['Poly', 0, 0],\n",
    "        'rhs_function': lambda t, y, params: [\n",
    "            y[1],  # dx/dt = y\n",
    "            -params[0] * y[1] - params[1] * y[0] - params[2] * y[0]**3 + params[3] * np.cos(params[4] * t)  # dy/dt = -delta * y - alpha * x - beta * x^3 + gamma * cos(omega * t)\n",
    "        ],\n",
    "        'parameters_and_IC': [\n",
    "            ([0.2, 1.0, 0.5, 0.3, 1.0], [1.0, 0.0], 'cyclic'),  # Typical cyclic motion\n",
    "            ([0.2, 1.0, 0.5, 0.8, 1.0], [0.5, 0.0], 'chaotic'),  # Chaotic motion\n",
    "        ]\n",
    "    },\n",
    "    'Van_der_Pol_Oscillator': {\n",
    "        'DCF_values': ['Poly', 0, 0],\n",
    "        'rhs_function': lambda t, y, params: [\n",
    "            y[1],  # dx/dt = y\n",
    "            params[0] * (1 - y[0]**2) * y[1] - y[0]  # dy/dt = mu * (1 - x^2) * y - x\n",
    "        ],\n",
    "        'parameters_and_IC': [\n",
    "            ([0.5], [1.0, 0.0], 'cyclic'),  # Typical cyclic motion\n",
    "            ([3.0], [0.5, 0.0], 'limit cycle'),  # Limit cycle for higher mu\n",
    "        ]\n",
    "    },\n",
    "    'Quartic_Oscillator': {\n",
    "        'DCF_values': ['Poly', 0, 0],\n",
    "        'rhs_function': lambda t, y, params: [\n",
    "            y[1],  # dx/dt = y\n",
    "            -params[0] * y[0]**3 - params[1] * y[0]**4  # dy/dt = -x^3 - x^4\n",
    "        ],\n",
    "        'parameters_and_IC': [\n",
    "            ([1.0, 0.5], [1.0, 0.0], 'cyclic'),  # Cyclic motion with quartic interaction\n",
    "            ([1.0, 1.0], [0.5, 0.0], 'complex'),  # More complex motion due to quartic term\n",
    "        ]\n",
    "    },\n",
    "    'Lotka_Volterra_Cubic': {\n",
    "        'DCF_values': ['Poly', 0, 0],\n",
    "        'rhs_function': lambda t, y, params: [\n",
    "            params[0] * y[0] - params[1] * y[0] * y[1] - params[2] * y[0]**3,  # dx/dt = alpha * x - beta * x * y - gamma * x^3\n",
    "            -params[3] * y[1] + params[4] * y[0] * y[1]**2  # dy/dt = -delta * y + epsilon * x * y^2\n",
    "        ],\n",
    "        'parameters_and_IC': [\n",
    "            ([1.0, 0.5, 0.1, 1.0, 0.1], [0.5, 1.0], 'cyclic'),  # Cyclic predator-prey dynamics\n",
    "            ([1.0, 0.5, 0.3, 1.0, 0.2], [0.7, 0.5], 'complex'),  # More complex dynamics due to cubic interaction\n",
    "        ]\n",
    "    }\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "19efcf1b-e923-43a7-8fb4-aa8d9ce7c32c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ode_systems.update({\n",
    "#     'Linear_1D': {\n",
    "#         'rhs_function': lambda t, y, params: [params[0] * y[0]],  # Single state: dx/dt = a * x (no cyclic behavior)\n",
    "#         'parameters_and_IC': [\n",
    "#             ([0.5], [1.0], 'growth'),   # Exponential growth\n",
    "#             ([-0.5], [1.0], 'decay'),   # Exponential decay\n",
    "#         ]\n",
    "#     },\n",
    "#     'Linear_2D_Harmonic_Oscillator': {\n",
    "#         'rhs_function': lambda t, y, params: [\n",
    "#             y[1],            # dx/dt = y\n",
    "#             -params[0] * y[0]  # dy/dt = -omega^2 * x\n",
    "#         ],\n",
    "#         'parameters_and_IC': [\n",
    "#             ([1.0], [1.0, 0.0], 'cyclic (simple harmonic oscillator)'),   # Cyclic behavior (ω = 1)\n",
    "#             ([0.25], [1.0, 0.0], 'cyclic (slower oscillation)'),         # Slower cyclic behavior (ω = 0.5)\n",
    "#         ]\n",
    "#     },\n",
    "#     'Linear_3D_Coupled_Oscillators': {\n",
    "#         'rhs_function': lambda t, y, params: [\n",
    "#             params[0] * y[1],  # dx1/dt = a * x2\n",
    "#             params[1] * y[2],  # dx2/dt = b * x3\n",
    "#             -params[2] * y[0]  # dx3/dt = -c * x1\n",
    "#         ],\n",
    "#         'parameters_and_IC': [\n",
    "#             ([1.0, 1.0, 1.0], [1.0, 0.0, 0.0], 'cyclic'),   # Cyclic with clear oscillations\n",
    "#             ([0.5, 0.5, 0.5], [1.0, 1.0, 1.0], 'slower cyclic')  # Slower oscillatory behavior\n",
    "#         ]\n",
    "#     },\n",
    "#     'Linear_4D_Coupled_Oscillators': {\n",
    "#         'rhs_function': lambda t, y, params: [\n",
    "#             params[0] * y[1],  # dx1/dt = a * x2\n",
    "#             params[1] * y[2],  # dx2/dt = b * x3\n",
    "#             params[2] * y[3],  # dx3/dt = c * x4\n",
    "#             -params[3] * y[0]  # dx4/dt = -d * x1\n",
    "#         ],\n",
    "#         'parameters_and_IC': [\n",
    "#             ([1.0, 1.0, 1.0, 1.0], [1.0, 0.0, 0.0, 0.0], 'cyclic'),   # Cyclic behavior with balanced coupling\n",
    "#             ([0., 0.5, 0.5, 0.5], [1.0, 0.0, 0.0, 0.0], 'slower cyclic')  # Slower cyclic behavior\n",
    "#         ]\n",
    "#     },\n",
    "#     'Linear_5D_Coupled_Oscillators': {\n",
    "#         'rhs_function': lambda t, y, params: [\n",
    "#             params[0] * y[1],  # dx1/dt = a * x2\n",
    "#             params[1] * y[2],  # dx2/dt = b * x3\n",
    "#             params[2] * y[3],  # dx3/dt = c * x4\n",
    "#             params[3] * y[4],  # dx4/dt = d * x5\n",
    "#             -params[4] * y[0]  # dx5/dt = -e * x1\n",
    "#         ],\n",
    "#         'parameters_and_IC': [\n",
    "#             ([1.0, 1.0, 1.0, 1.0, 1.0], [1.0, 0.0, 0.0, 0.0, 0.0], 'cyclic'),  # Cyclic with clear oscillations\n",
    "#             ([0.5, 0.5, 0.5, 0.5, 0.5], [1.0, 110.0, 110.0, 10.0, -20.0], 'slower cyclic')  # Slower cyclic behavior\n",
    "#         ]\n",
    "#     }\n",
    "# })\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b28f00bf-98cc-4226-92db-5adf6aada403",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ode_systems.update({\n",
    "#     'Duffing_Oscillator': {\n",
    "#         'rhs_function': lambda t, y, params: [\n",
    "#             y[1],  # dx/dt = y\n",
    "#             -params[0] * y[1] - params[1] * y[0] - params[2] * y[0]**3 + params[3] * np.cos(params[4] * t)  # dy/dt = -delta * y - alpha * x - beta * x^3 + gamma * cos(omega * t)\n",
    "#         ],\n",
    "#         'parameters_and_IC': [\n",
    "#             ([0.2, 1.0, 0.5, 0.3, 1.0], [1.0, 0.0], 'cyclic'),  # Typical cyclic motion\n",
    "#             ([0.2, 1.0, 0.5, 0.8, 1.0], [0.5, 0.0], 'chaotic'),  # Chaotic motion\n",
    "#         ]\n",
    "#     },\n",
    "#     'Van_der_Pol_Oscillator': {\n",
    "#         'rhs_function': lambda t, y, params: [\n",
    "#             y[1],  # dx/dt = y\n",
    "#             params[0] * (1 - y[0]**2) * y[1] - y[0]  # dy/dt = mu * (1 - x^2) * y - x\n",
    "#         ],\n",
    "#         'parameters_and_IC': [\n",
    "#             ([0.5], [1.0, 0.0], 'cyclic'),  # Typical cyclic motion\n",
    "#             ([3.0], [0.5, 0.0], 'limit cycle'),  # Limit cycle for higher mu\n",
    "#         ]\n",
    "#     },\n",
    "#     'Quartic_Oscillator': {\n",
    "#         'rhs_function': lambda t, y, params: [\n",
    "#             y[1],  # dx/dt = y\n",
    "#             -params[0] * y[0]**3 - params[1] * y[0]**4  # dy/dt = -x^3 - x^4\n",
    "#         ],\n",
    "#         'parameters_and_IC': [\n",
    "#             ([1.0, 0.5], [1.0, 0.0], 'cyclic'),  # Cyclic motion with quartic interaction\n",
    "#             ([1.0, 1.0], [0.5, 0.0], 'complex'),  # More complex motion due to quartic term\n",
    "#         ]\n",
    "#     },\n",
    "#     'Lotka_Volterra_Cubic': {\n",
    "#         'rhs_function': lambda t, y, params: [\n",
    "#             params[0] * y[0] - params[1] * y[0] * y[1] - params[2] * y[0]**3,  # dx/dt = alpha * x - beta * x * y - gamma * x^3\n",
    "#             -params[3] * y[1] + params[4] * y[0] * y[1]**2  # dy/dt = -delta * y + epsilon * x * y^2\n",
    "#         ],\n",
    "#         'parameters_and_IC': [\n",
    "#             ([1.0, 0.5, 0.1, 1.0, 0.1], [0.5, 1.0], 'cyclic'),  # Cyclic predator-prey dynamics\n",
    "#             ([1.0, 0.5, 0.3, 1.0, 0.2], [0.7, 0.5], 'complex'),  # More complex dynamics due to cubic interaction\n",
    "#         ]\n",
    "#     }\n",
    "# })\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62cf84e6-7dc5-4a82-a7ca-e9d736da8917",
   "metadata": {},
   "source": [
    "## Demo of simulating a system from the model dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "10eeb15c-077e-4460-a01b-bb4d61a2f987",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simulating Lotka_Volterra_Cubic system with parameters: [1.0, 0.5, 0.1, 1.0, 0.1]\n",
      "Initial conditions: [0.5, 1.0]\n",
      "Expected behavior: cyclic\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAArMAAAIhCAYAAABdSTJTAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8fJSN1AAAACXBIWXMAAA9hAAAPYQGoP6dpAABdUUlEQVR4nO3dd3xW5f3/8fed5M6dvTeEkARI2CMoQ/YIgoKzWmnFgVXEUURtQVsFtD+0X8VRBKyCuKpUUaSKQhTZQ0CQvQNhJISEkZBA5vn9gaSNCZhAknOf5PV8PHi093Vf5z6fw5Ub3l5c5zo2wzAMAQAAABbkYnYBAAAAwOUizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAKwtMWLF+vee+9VYmKivL291ahRI91www3asGFDhb59+vSRzWaTzWaTi4uLfH191axZM/3mN7/Rp59+qtLS0iqd8+677y77HJvNJofDoYSEBD377LM6d+5cuX4+Pj41dq11ZeHChUpOTlZUVJQcDoeioqLUp08fvfDCC2aXBgAVEGYBWNr06dN14MAB/fGPf9SCBQv02muvKTMzU127dtXixYsr9I+Li9Pq1au1atUqzZs3T+PGjdPZs2f1m9/8Rn369NHp06erdF5PT0+tXr1aq1ev1rx589SlSxdNmjRJd911V01fYp2aMWOGrr32Wvn5+Wnq1KlauHChXnzxRbVs2VKffvqp2eUBQAU2wzAMs4sAgMuVmZmpsLCwcm1nzpxRs2bN1KZNG3377bdl7X369FFWVpa2bt1a4XPeeecd3Xvvvbrttts0Z86cS57z7rvv1qeffqozZ86Ua+/Vq5eWL1+uw4cPq1GjRhft58xiYmLUtGlTLV26tMJ7paWlcnFhDgSAc+FPJQCW9ssgK0k+Pj5q1aqVDh06VOXPueeeezRkyBB98sknOnjw4GXV0rVrV0mqcPzevXs1ZMgQ+fj4KDo6Wo8//rgKCgrK9Zk4caK6dOmioKAg+fn5qVOnTpo5c6Z+Od+wePFi9enTR8HBwfL09FSTJk10yy23KD8/v6xPYWGhnn/+eSUmJsrhcCg0NFT33HOPjh8//qvXkJ2drcjIyErf+2WQtdlsevjhh/Xmm2+qRYsWcjgcatWqlT7++ONy/Y4fP67Ro0erVatW8vHxUVhYmPr166fly5dXOEdBQYEmTZqkli1bysPDQ8HBwerbt69WrVpV1scwDE2bNk0dOnSQp6enAgMDdeutt2r//v2/en0A6h/CLIB65/Tp0/rxxx/VunXrah03bNgwGYZRaciqir1790qSQkNDy9qKioo0bNgw9e/fX1988YXuvfdevfLKK3rxxRfLHXvgwAE98MAD+ve//63PPvtMN998sx555BE999xz5fpcd911cnd316xZs/TNN9/ohRdekLe3twoLCyWdnz294YYb9MILL2j48OH66quv9MILLyglJUV9+vTR2bNnL3kN3bp109y5czVhwgT99NNPKikpuWT/+fPn6/XXX9ekSZP06aefKiYmRnfccUe5JQknTpyQJD377LP66quv9M477yguLk59+vTRkiVLyvoVFxdr8ODBeu6553T99dfr888/1+zZs9W9e3elpaWV9XvggQc0ZswYDRgwQPPmzdO0adO0bds2de/eXceOHbtkvQDqIQMA6pnf/e53hpubm7F+/fpy7b179zZat2590eO+/vprQ5Lx4osvXvLz77rrLsPb29soKioyioqKjOPHjxuvvfaaYbPZjKuuuqpcP0nGv//973LHDxkyxEhISLjo55eUlBhFRUXGpEmTjODgYKO0tNQwDMP49NNPDUnGpk2bLnrsRx99ZEgy5s6dW6593bp1hiRj2rRpl7y2vXv3Gm3atDEkGZIMT09Po3///sbUqVONwsLCcn0vvJ+RkVHWVlxcbCQmJhrNmjW76DmKi4uNoqIio3///sZNN91U1v7ee+8Zkoy33nrroseuXr3akGS8/PLL5doPHTpkeHp6Gn/6058ueX0A6h9mZgHUK3/961/14Ycf6pVXXlFSUlK1jjWqcQtBXl6e7Ha77Ha7QkNDNWbMGA0ePFiff/55uX42m01Dhw4t19auXbsKSxEWL16sAQMGyN/fX66urrLb7XrmmWeUnZ2tzMxMSVKHDh3k7u6u+++/X++++26l/6z+5ZdfKiAgQEOHDlVxcXHZrw4dOigiIqLcTGhl4uPj9dNPP2np0qWaOHGiBgwYoHXr1unhhx9Wt27dyu3WIEn9+/dXeHh42WtXV1fdfvvt2rt3rw4fPlzWPmPGDHXq1EkeHh5yc3OT3W7Xd999px07dpT1+frrr+Xh4aF77733ovV9+eWXstls+v3vf1/u+iIiItS+fftfvT4A9Q9hFkC9MXHiRD3//PP629/+pocffrjax18ImFFRUb/a19PTU+vWrdO6deu0efNmnTp1Sl999ZUaNWpUrp+Xl5c8PDzKtTkcjnKh8IcfflBycrIk6a233tLKlSu1bt06Pf3005JUtjQgPj5e3377rcLCwvTQQw8pPj5e8fHxeu2118o+69ixYzp16pTc3d3LwvaFXxkZGcrKyvrVa3NxcVGvXr30zDPPaP78+Tp69Khuv/12bdiwQbNmzSrXNyIiosLxF9qys7MlSVOmTNGDDz6oLl26aO7cuVqzZo3WrVuna6+9ttyyh+PHjysqKuqSN5kdO3ZMhmEoPDy8wvWtWbOmStcHoH5xM7sAAKgJEydO1IQJEzRhwgQ99dRTl/UZ8+fPl81mU69evX61r4uLizp37nxZ5/mljz/+WHa7XV9++WW54Dtv3rwKfXv27KmePXuqpKRE69ev1z/+8Q+NGTNG4eHh+u1vf6uQkBAFBwfrm2++qfRcvr6+1a7P29tb48eP15w5cyrsBJGRkVGh/4W24OBgSdIHH3ygPn36aPr06eX65ebmlnsdGhqqFStWXHLXhJCQENlsNi1fvlwOh6PC+5W1AajfmJkFYHnPPfecJkyYoL/85S969tlnL+sz3nnnHX399de644471KRJkxqu8NJsNpvc3Nzk6upa1nb27Fm9//77Fz3G1dVVXbp00RtvvCFJ+vHHHyVJ119/vbKzs1VSUqLOnTtX+JWQkHDJWtLT0yttv7Ac4Jez1t999125m65KSko0Z84cxcfHq3HjxmXX98uQuXnzZq1evbpc2+DBg3Xu3DnNnj37ovVdf/31MgxDR44cqfT62rZte8nrA1D/MDMLwNJefvllPfPMM7r22mt13XXXac2aNeXev7Bd1gVnz54t63P27Fnt379f8+bN05dffqnevXtrxowZdVb7Bdddd52mTJmi4cOH6/7771d2drZeeumlCgFwxowZWrx4sa677jo1adJE586dK/tn/wEDBkiSfvvb3+rDDz/UkCFD9Mc//lFXX3217Ha7Dh8+rO+//1433HCDbrrppovW0rp1a/Xv31+DBw9WfHy8zp07p7Vr1+rll19WeHi4Ro4cWa5/SEiI+vXrp7/+9a/y9vbWtGnTtHPnznLbc11//fV67rnn9Oyzz6p3797a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8vIuegzfp7p3OeN0Ad+nutO4cWO98MILWr9+vdavX69+/frphhtu0LZt2yrtz3fpIgxckauvvtoYNWpUubbExERj3Lhxlfb//vvvDUnGyZMn66A6VEaS8fnnn1+yz5/+9CcjMTGxXNsDDzxgdO3atRYrw/+qyjjxfTJfZmamIclYunTpRfvwfTJfVcaJ75NzCAwMNN5+++1K3+O7VDlmZq9AYWGhNmzYoOTk5HLtycnJWrVq1SWP7dixoyIjI9W/f399//33tVkmLsPq1asrjOugQYO0fv16FRUVmVQVLobvk3lOnz4tSQoKCrpoH75P5qvKOF3A98kcJSUl+vjjj5WXl6du3bpV2ofvUuUIs1cgKytLJSUlCg8PL9ceHh6ujIyMSo+JjIzUP//5T82dO1efffaZEhIS1L9/fy1btqwuSkYVZWRkVDquxcXFysrKMqkq/BLfJ3MZhqGxY8eqR48eatOmzUX78X0yV1XHie+TObZs2SIfHx85HA6NGjVKn3/+uVq1alVpX75LlXMzu4D6wGazlXttGEaFtgsSEhKUkJBQ9rpbt246dOiQXnrpJfXq1atW60T1VDaulbXDPHyfzPXwww9r8+bNWrFixa/25ftknqqOE98ncyQkJGjTpk06deqU5s6dq7vuuktLly69aKDlu1QRM7NXICQkRK6urhVmYTMzMyv8l9OldO3aVXv27Knp8nAFIiIiKh1XNzc3BQcHm1QVqoLvU9145JFHNH/+fH3//fdq3LjxJfvyfTJPdcapMnyfap+7u7uaNWumzp07a/LkyWrfvr1ee+21SvvyXaocYfYKuLu7KykpSSkpKeXaU1JS1L179yp/zsaNGxUZGVnT5eEKdOvWrcK4Llq0SJ07d5bdbjepKlQF36faZRiGHn74YX322WdavHixYmNjf/UYvk9173LGqTJ8n+qeYRgqKCio9D2+Sxdh2q1n9cTHH39s2O12Y+bMmcb27duNMWPGGN7e3saBAwcMwzCMcePGGXfeeWdZ/1deecX4/PPPjd27dxtbt241xo0bZ0gy5s6da9YlNAi5ubnGxo0bjY0bNxqSjClTphgbN240Dh48aBhGxXHav3+/4eXlZTz22GPG9u3bjZkzZxp2u9349NNPzbqEBqG648T3qe49+OCDhr+/v7FkyRIjPT297Fd+fn5ZH75P5rucceL7VPfGjx9vLFu2zEhNTTU2b95sPPXUU4aLi4uxaNEiwzD4LlUVYbYGvPHGG0ZMTIzh7u5udOrUqdzWJ3fddZfRu3fvstcvvviiER8fb3h4eBiBgYFGjx49jK+++sqEqhuWC1vO/PLXXXfdZRhGxXEyDMNYsmSJ0bFjR8Pd3d1o2rSpMX369LovvIGp7jjxfap7lY2PJOOdd94p68P3yXyXM058n+revffeW5YfQkNDjf79+5cFWcPgu1RVNsP4eeUwAAAAYDGsmQUAAIBlEWYBAABgWYRZAAAAWBZhFgAAAJZFmAUAAIBlEWYBAABgWYRZAAAAWBZhFgAAAJZFmAUAAIBlEWYBoA5kZmbqgQceUJMmTeRwOBQREaFBgwZp9erVZX1sNpvmzZtX7c9u2rSpXn311Rqpc+nSpUpKSpKHh4fi4uI0Y8aMGvlcAKgtbmYXAAANwS233KKioiK9++67iouL07Fjx/Tdd9/pxIkTZpdWJjU1VUOGDNEf/vAHffDBB1q5cqVGjx6t0NBQ3XLLLWaXBwCVshmGYZhdBADUZ6dOnVJgYKCWLFmi3r17V9qnadOmOnjwYNnrmJgYHThwQPv27dPYsWO1Zs0a5eXlqWXLlpo8ebIGDBggSerTp4+WLl1a7rMu/LG+atUqjRs3TuvWrVNISIhuuukmTZ48Wd7e3pXW8Oc//1nz58/Xjh07ytpGjRqln376qdwMMgA4E5YZAEAt8/HxkY+Pj+bNm6eCgoJK+6xbt06S9M477yg9Pb3s9ZkzZzRkyBB9++232rhxowYNGqShQ4cqLS1NkvTZZ5+pcePGmjRpktLT05Weni5J2rJliwYNGqSbb75Zmzdv1pw5c7RixQo9/PDDF61z9erVSk5OLtc2aNAgrV+/XkVFRVf8+wAAtYEwCwC1zM3NTbNnz9a7776rgIAAXXPNNXrqqae0efPmsj6hoaGSpICAAEVERJS9bt++vR544AG1bdtWzZs31/PPP6+4uDjNnz9fkhQUFCRXV1f5+voqIiJCERERkqT/+7//0/DhwzVmzBg1b95c3bt31+uvv6733ntP586dq7TOjIwMhYeHl2sLDw9XcXGxsrKyavz3BQBqAmEWAOrALbfcoqNHj2r+/PkaNGiQlixZok6dOmn27NmXPC4vL09/+tOf1KpVKwUEBMjHx0c7d+4sm5m9mA0bNmj27Nlls8I+Pj4aNGiQSktLlZqaetHjbDZbudcXliz8sh0AnAU3gAFAHfHw8NDAgQM1cOBAPfPMM7rvvvv07LPP6u67777oMU8++aQWLlyol156Sc2aNZOnp6duvfVWFRYWXvJcpaWleuCBB/Too49WeK9JkyaVHhMREaGMjIxybZmZmXJzc1NwcPCvXyAAmIAwCwAmadWqVbmtuOx2u0pKSsr1Wb58ue6++27ddNNNks6voT1w4EC5Pu7u7hWO69Spk7Zt26ZmzZpVuZ5u3brpP//5T7m2RYsWqXPnzrLb7VX+HACoSywzAIBalp2drX79+umDDz7Q5s2blZqaqk8++UR///vfdcMNN5T1a9q0qb777jtlZGTo5MmTkqRmzZrps88+06ZNm/TTTz9p+PDhKi0tLff5TZs21bJly3TkyJGyta1//vOftXr1aj300EPatGmT9uzZo/nz5+uRRx65aJ2jRo3SwYMHNXbsWO3YsUOzZs3SzJkz9cQTT9TC7woA1AzCLADUMh8fH3Xp0kWvvPKKevXqpTZt2uivf/2r/vCHP2jq1Kll/V5++WWlpKQoOjpaHTt2lCS98sorCgwMVPfu3TV06FANGjRInTp1Kvf5kyZN0oEDBxQfH19241i7du20dOlS7dmzRz179lTHjh3117/+VZGRkRetMzY2VgsWLNCSJUvUoUMHPffcc3r99dfZYxaAU2OfWQAAAFgWM7MAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMsizAIAAMCyCLMAAACwLMIsAAAALIswCwAAAMv6/34GautB33d0AAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example of how to access the rhs function and parameters_and_IC for the Lorenz system\n",
    "# system_name = 'Lorenz'\n",
    "# system_name = 'Van_der_Pol'\n",
    "# system_name = 'Lorenz96'\n",
    "system_name = 'Lotka_Volterra_Cubic'\n",
    "\n",
    "rhs_func = ode_systems[system_name]['rhs_function']\n",
    "parameters_and_IC = ode_systems[system_name]['parameters_and_IC']\n",
    "\n",
    "# Accessing a specific pair of parameters and initial conditions for the selected system\n",
    "param_IC_index = 0\n",
    "\n",
    "\n",
    "params = parameters_and_IC[param_IC_index][0]  # Parameter values\n",
    "initial_conditions = parameters_and_IC[param_IC_index][1]  # Initial conditions\n",
    "description = parameters_and_IC[param_IC_index][2]  # Behavior description\n",
    "\n",
    "print(f\"Simulating {system_name} system with parameters: {params}\")\n",
    "print(f\"Initial conditions: {initial_conditions}\")\n",
    "print(f\"Expected behavior: {description}\")\n",
    "\n",
    "# Simulating the Lorenz system with first set of parameters and initial conditions\n",
    "t_span = (0, 20)\n",
    "t_eval = np.linspace(t_span[0], t_span[1], 10000)\n",
    "\n",
    "sol = simulate_ode_system(rhs_func, t_span, initial_conditions, params, solver='RK45', t_eval=t_eval)\n",
    "\n",
    "# Plot phase space and trajectories\n",
    "plot_phase_space(sol)\n",
    "plot_trajectories(sol)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "57b606bc-7167-41a9-a641-f12a368f88f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loop through each key, value pair in the main dictionary\n",
    "for key in ode_systems:\n",
    "    # Adding a new key 'DCF_values' to each sub-dictionary\n",
    "    # The value is a list of length 3 as specified\n",
    "    ode_systems[key]['DCF_values'] = [\n",
    "        \"Poly\",  # Type of terms on the RHS\n",
    "        0,       # The integer representing the highest degree appearing on the right-hand side of the ODE system\n",
    "        0        # The number of hidden states\n",
    "    ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3870f4d7-2f60-4091-96f5-0e0e7c984bdb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5a0eb20-24b1-4628-b198-d6bd9d65c91d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ebd64c6c-0399-424a-9dc4-57e0c983ce94",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "fab8f08b-d591-487d-9f95-c5afa8b3b47b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Lorenz': {'rhs_function': <function __main__.<lambda>(t, y, params)>,\n",
       "  'parameters_and_IC': [([10.0, 28.0, 2.6666666666666665],\n",
       "    [1.0, 1.0, 1.0],\n",
       "    'chaotic'),\n",
       "   ([10.0, 15.0, 2.6666666666666665], [0.5, 0.5, 0.5], 'fixed_point'),\n",
       "   ([10.0, 100.0, 2.6666666666666665], [2.0, 2.0, 2.0], 'chaotic')],\n",
       "  'DCF_values': ['Poly', 0, 0]},\n",
       " 'Van_der_Pol': {'rhs_function': <function __main__.<lambda>(t, y, params)>,\n",
       "  'parameters_and_IC': [([0.5], [1.0, 0.0], 'cyclic'),\n",
       "   ([1.0], [0.0, 1.0], 'cyclic'),\n",
       "   ([10.0], [2.0, 0.0], 'cyclic'),\n",
       "   ([20.0], [0.1, 0.1], 'cyclic')],\n",
       "  'DCF_values': ['Poly', 0, 0]},\n",
       " 'Rossler': {'rhs_function': <function __main__.<lambda>(t, y, params)>,\n",
       "  'parameters_and_IC': [([0.2, 0.2, 5.7], [1.0, 1.0, 1.0], 'chaotic'),\n",
       "   ([0.1, 0.1, 6.0], [0.5, 0.5, 0.5], 'cyclic'),\n",
       "   ([0.2, 0.2, 10.0], [1.0, 0.0, 0.0], 'chaotic')],\n",
       "  'DCF_values': ['Poly', 0, 0]},\n",
       " 'Lorenz96': {'rhs_function': <function __main__.<lambda>(t, y, params)>,\n",
       "  'parameters_and_IC': [([10.0, 4], [0.0, 1.0, 2.0, 3.0], 'cyclic'),\n",
       "   ([12.0, 6], [1.0, 0.5, 0.5, 0.5, 1.0, 0.0], 'chaotic')],\n",
       "  'DCF_values': ['Poly', 0, 0]},\n",
       " 'Linear_1D': {'rhs_function': <function __main__.<lambda>(t, y, params)>,\n",
       "  'parameters_and_IC': [([0.5], [1.0], 'growth'), ([-0.5], [1.0], 'decay')],\n",
       "  'DCF_values': ['Poly', 0, 0]},\n",
       " 'Linear_2D_Harmonic_Oscillator': {'rhs_function': <function __main__.<lambda>(t, y, params)>,\n",
       "  'parameters_and_IC': [([1.0],\n",
       "    [1.0, 0.0],\n",
       "    'cyclic (simple harmonic oscillator)'),\n",
       "   ([0.25], [1.0, 0.0], 'cyclic (slower oscillation)')],\n",
       "  'DCF_values': ['Poly', 0, 0]},\n",
       " 'Linear_3D_Coupled_Oscillators': {'rhs_function': <function __main__.<lambda>(t, y, params)>,\n",
       "  'parameters_and_IC': [([1.0, 1.0, 1.0], [1.0, 0.0, 0.0], 'cyclic'),\n",
       "   ([0.5, 0.5, 0.5], [1.0, 1.0, 1.0], 'slower cyclic')],\n",
       "  'DCF_values': ['Poly', 0, 0]},\n",
       " 'Linear_4D_Coupled_Oscillators': {'rhs_function': <function __main__.<lambda>(t, y, params)>,\n",
       "  'parameters_and_IC': [([1.0, 1.0, 1.0, 1.0], [1.0, 0.0, 0.0, 0.0], 'cyclic'),\n",
       "   ([0.0, 0.5, 0.5, 0.5], [1.0, 0.0, 0.0, 0.0], 'slower cyclic')],\n",
       "  'DCF_values': ['Poly', 0, 0]},\n",
       " 'Linear_5D_Coupled_Oscillators': {'rhs_function': <function __main__.<lambda>(t, y, params)>,\n",
       "  'parameters_and_IC': [([1.0, 1.0, 1.0, 1.0, 1.0],\n",
       "    [1.0, 0.0, 0.0, 0.0, 0.0],\n",
       "    'cyclic'),\n",
       "   ([0.5, 0.5, 0.5, 0.5, 0.5],\n",
       "    [1.0, 110.0, 110.0, 10.0, -20.0],\n",
       "    'slower cyclic')],\n",
       "  'DCF_values': ['Poly', 0, 0]},\n",
       " 'Duffing_Oscillator': {'rhs_function': <function __main__.<lambda>(t, y, params)>,\n",
       "  'parameters_and_IC': [([0.2, 1.0, 0.5, 0.3, 1.0], [1.0, 0.0], 'cyclic'),\n",
       "   ([0.2, 1.0, 0.5, 0.8, 1.0], [0.5, 0.0], 'chaotic')],\n",
       "  'DCF_values': ['Poly', 0, 0]},\n",
       " 'Van_der_Pol_Oscillator': {'rhs_function': <function __main__.<lambda>(t, y, params)>,\n",
       "  'parameters_and_IC': [([0.5], [1.0, 0.0], 'cyclic'),\n",
       "   ([3.0], [0.5, 0.0], 'limit cycle')],\n",
       "  'DCF_values': ['Poly', 0, 0]},\n",
       " 'Quartic_Oscillator': {'rhs_function': <function __main__.<lambda>(t, y, params)>,\n",
       "  'parameters_and_IC': [([1.0, 0.5], [1.0, 0.0], 'cyclic'),\n",
       "   ([1.0, 1.0], [0.5, 0.0], 'complex')],\n",
       "  'DCF_values': ['Poly', 0, 0]},\n",
       " 'Lotka_Volterra_Cubic': {'rhs_function': <function __main__.<lambda>(t, y, params)>,\n",
       "  'parameters_and_IC': [([1.0, 0.5, 0.1, 1.0, 0.1], [0.5, 1.0], 'cyclic'),\n",
       "   ([1.0, 0.5, 0.3, 1.0, 0.2], [0.7, 0.5], 'complex')],\n",
       "  'DCF_values': ['Poly', 0, 0]}}"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ode_systems"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "3e957b34-9cde-4f05-9083-001799bca25e",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open(\"ode_systems_dict.yaml\", 'w') as file:\n",
    "    yaml.dump(ode_systems, file, default_flow_style=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "27d780bc-0586-4dc9-99d0-e980cb39634f",
   "metadata": {},
   "outputs": [
    {
     "ename": "ConstructorError",
     "evalue": "could not determine a constructor for the tag 'tag:yaml.org,2002:python/name:__main__.<lambda>'\n  in \"ode_systems_dict.yaml\", line 25, column 17",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mConstructorError\u001b[0m                          Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[98], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Read the YAML file and convert it to a Python dictionary\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mopen\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mode_systems_dict.yaml\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m'\u001b[39m) \u001b[38;5;28;01mas\u001b[39;00m file:\n\u001b[0;32m----> 3\u001b[0m     data \u001b[38;5;241m=\u001b[39m \u001b[43myaml\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msafe_load\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile\u001b[49m\u001b[43m)\u001b[49m  \u001b[38;5;66;03m# Use safe_load for better security\u001b[39;00m\n\u001b[1;32m      5\u001b[0m \u001b[38;5;66;03m# Display the imported data\u001b[39;00m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28mprint\u001b[39m(data)\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/__init__.py:125\u001b[0m, in \u001b[0;36msafe_load\u001b[0;34m(stream)\u001b[0m\n\u001b[1;32m    117\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msafe_load\u001b[39m(stream):\n\u001b[1;32m    118\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    119\u001b[0m \u001b[38;5;124;03m    Parse the first YAML document in a stream\u001b[39;00m\n\u001b[1;32m    120\u001b[0m \u001b[38;5;124;03m    and produce the corresponding Python object.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    123\u001b[0m \u001b[38;5;124;03m    to be safe for untrusted input.\u001b[39;00m\n\u001b[1;32m    124\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 125\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mload\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstream\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mSafeLoader\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/__init__.py:81\u001b[0m, in \u001b[0;36mload\u001b[0;34m(stream, Loader)\u001b[0m\n\u001b[1;32m     79\u001b[0m loader \u001b[38;5;241m=\u001b[39m Loader(stream)\n\u001b[1;32m     80\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m---> 81\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mloader\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_single_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     82\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m     83\u001b[0m     loader\u001b[38;5;241m.\u001b[39mdispose()\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/constructor.py:51\u001b[0m, in \u001b[0;36mBaseConstructor.get_single_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     49\u001b[0m node \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_single_node()\n\u001b[1;32m     50\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m node \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m---> 51\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconstruct_document\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnode\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     52\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/constructor.py:60\u001b[0m, in \u001b[0;36mBaseConstructor.construct_document\u001b[0;34m(self, node)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstate_generators \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m     59\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m generator \u001b[38;5;129;01min\u001b[39;00m state_generators:\n\u001b[0;32m---> 60\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mdummy\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mgenerator\u001b[49m\u001b[43m:\u001b[49m\n\u001b[1;32m     61\u001b[0m \u001b[43m            \u001b[49m\u001b[38;5;28;43;01mpass\u001b[39;49;00m\n\u001b[1;32m     62\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconstructed_objects \u001b[38;5;241m=\u001b[39m {}\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/constructor.py:413\u001b[0m, in \u001b[0;36mSafeConstructor.construct_yaml_map\u001b[0;34m(self, node)\u001b[0m\n\u001b[1;32m    411\u001b[0m data \u001b[38;5;241m=\u001b[39m {}\n\u001b[1;32m    412\u001b[0m \u001b[38;5;28;01myield\u001b[39;00m data\n\u001b[0;32m--> 413\u001b[0m value \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconstruct_mapping\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnode\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    414\u001b[0m data\u001b[38;5;241m.\u001b[39mupdate(value)\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/constructor.py:218\u001b[0m, in \u001b[0;36mSafeConstructor.construct_mapping\u001b[0;34m(self, node, deep)\u001b[0m\n\u001b[1;32m    216\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(node, MappingNode):\n\u001b[1;32m    217\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mflatten_mapping(node)\n\u001b[0;32m--> 218\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconstruct_mapping\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdeep\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdeep\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/constructor.py:143\u001b[0m, in \u001b[0;36mBaseConstructor.construct_mapping\u001b[0;34m(self, node, deep)\u001b[0m\n\u001b[1;32m    140\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, collections\u001b[38;5;241m.\u001b[39mabc\u001b[38;5;241m.\u001b[39mHashable):\n\u001b[1;32m    141\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m ConstructorError(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwhile constructing a mapping\u001b[39m\u001b[38;5;124m\"\u001b[39m, node\u001b[38;5;241m.\u001b[39mstart_mark,\n\u001b[1;32m    142\u001b[0m                 \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfound unhashable key\u001b[39m\u001b[38;5;124m\"\u001b[39m, key_node\u001b[38;5;241m.\u001b[39mstart_mark)\n\u001b[0;32m--> 143\u001b[0m     value \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconstruct_object\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalue_node\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdeep\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdeep\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    144\u001b[0m     mapping[key] \u001b[38;5;241m=\u001b[39m value\n\u001b[1;32m    145\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m mapping\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/constructor.py:100\u001b[0m, in \u001b[0;36mBaseConstructor.construct_object\u001b[0;34m(self, node, deep)\u001b[0m\n\u001b[1;32m     98\u001b[0m             constructor \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\u001b[38;5;241m.\u001b[39mconstruct_mapping\n\u001b[1;32m     99\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m tag_suffix \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 100\u001b[0m     data \u001b[38;5;241m=\u001b[39m \u001b[43mconstructor\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnode\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    101\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    102\u001b[0m     data \u001b[38;5;241m=\u001b[39m constructor(\u001b[38;5;28mself\u001b[39m, tag_suffix, node)\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/constructor.py:427\u001b[0m, in \u001b[0;36mSafeConstructor.construct_undefined\u001b[0;34m(self, node)\u001b[0m\n\u001b[1;32m    426\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mconstruct_undefined\u001b[39m(\u001b[38;5;28mself\u001b[39m, node):\n\u001b[0;32m--> 427\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m ConstructorError(\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m    428\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcould not determine a constructor for the tag \u001b[39m\u001b[38;5;132;01m%r\u001b[39;00m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m%\u001b[39m node\u001b[38;5;241m.\u001b[39mtag,\n\u001b[1;32m    429\u001b[0m             node\u001b[38;5;241m.\u001b[39mstart_mark)\n",
      "\u001b[0;31mConstructorError\u001b[0m: could not determine a constructor for the tag 'tag:yaml.org,2002:python/name:__main__.<lambda>'\n  in \"ode_systems_dict.yaml\", line 25, column 17"
     ]
    }
   ],
   "source": [
    "\n",
    "# Read the YAML file and convert it to a Python dictionary\n",
    "with open('ode_systems_dict.yaml', 'r') as file:\n",
    "    data = yaml.safe_load(file)  # Use safe_load for better security\n",
    "\n",
    "# Display the imported data\n",
    "print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "da2a7bb9-4521-4be6-bfc8-edcd87c1bc27",
   "metadata": {},
   "outputs": [
    {
     "ename": "ConstructorError",
     "evalue": "could not determine a constructor for the tag 'tag:yaml.org,2002:python/name:__main__.<lambda>'\n  in \"functions.yaml\", line 25, column 17",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mConstructorError\u001b[0m                          Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[99], line 30\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[38;5;66;03m# Load from YAML\u001b[39;00m\n\u001b[1;32m     29\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mopen\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mfunctions.yaml\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124m'\u001b[39m) \u001b[38;5;28;01mas\u001b[39;00m file:\n\u001b[0;32m---> 30\u001b[0m     loaded_data \u001b[38;5;241m=\u001b[39m \u001b[43myaml\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msafe_load\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfile\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     32\u001b[0m \u001b[38;5;66;03m# Deserialize the data\u001b[39;00m\n\u001b[1;32m     33\u001b[0m deserialized_data \u001b[38;5;241m=\u001b[39m deserialize_lambda(loaded_data)\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/__init__.py:125\u001b[0m, in \u001b[0;36msafe_load\u001b[0;34m(stream)\u001b[0m\n\u001b[1;32m    117\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21msafe_load\u001b[39m(stream):\n\u001b[1;32m    118\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    119\u001b[0m \u001b[38;5;124;03m    Parse the first YAML document in a stream\u001b[39;00m\n\u001b[1;32m    120\u001b[0m \u001b[38;5;124;03m    and produce the corresponding Python object.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    123\u001b[0m \u001b[38;5;124;03m    to be safe for untrusted input.\u001b[39;00m\n\u001b[1;32m    124\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 125\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mload\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstream\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mSafeLoader\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/__init__.py:81\u001b[0m, in \u001b[0;36mload\u001b[0;34m(stream, Loader)\u001b[0m\n\u001b[1;32m     79\u001b[0m loader \u001b[38;5;241m=\u001b[39m Loader(stream)\n\u001b[1;32m     80\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m---> 81\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mloader\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_single_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     82\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m     83\u001b[0m     loader\u001b[38;5;241m.\u001b[39mdispose()\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/constructor.py:51\u001b[0m, in \u001b[0;36mBaseConstructor.get_single_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     49\u001b[0m node \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_single_node()\n\u001b[1;32m     50\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m node \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m---> 51\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconstruct_document\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnode\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     52\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/constructor.py:60\u001b[0m, in \u001b[0;36mBaseConstructor.construct_document\u001b[0;34m(self, node)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstate_generators \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m     59\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m generator \u001b[38;5;129;01min\u001b[39;00m state_generators:\n\u001b[0;32m---> 60\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mdummy\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mgenerator\u001b[49m\u001b[43m:\u001b[49m\n\u001b[1;32m     61\u001b[0m \u001b[43m            \u001b[49m\u001b[38;5;28;43;01mpass\u001b[39;49;00m\n\u001b[1;32m     62\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconstructed_objects \u001b[38;5;241m=\u001b[39m {}\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/constructor.py:413\u001b[0m, in \u001b[0;36mSafeConstructor.construct_yaml_map\u001b[0;34m(self, node)\u001b[0m\n\u001b[1;32m    411\u001b[0m data \u001b[38;5;241m=\u001b[39m {}\n\u001b[1;32m    412\u001b[0m \u001b[38;5;28;01myield\u001b[39;00m data\n\u001b[0;32m--> 413\u001b[0m value \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconstruct_mapping\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnode\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    414\u001b[0m data\u001b[38;5;241m.\u001b[39mupdate(value)\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/constructor.py:218\u001b[0m, in \u001b[0;36mSafeConstructor.construct_mapping\u001b[0;34m(self, node, deep)\u001b[0m\n\u001b[1;32m    216\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(node, MappingNode):\n\u001b[1;32m    217\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mflatten_mapping(node)\n\u001b[0;32m--> 218\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconstruct_mapping\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnode\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdeep\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdeep\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/constructor.py:143\u001b[0m, in \u001b[0;36mBaseConstructor.construct_mapping\u001b[0;34m(self, node, deep)\u001b[0m\n\u001b[1;32m    140\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, collections\u001b[38;5;241m.\u001b[39mabc\u001b[38;5;241m.\u001b[39mHashable):\n\u001b[1;32m    141\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m ConstructorError(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwhile constructing a mapping\u001b[39m\u001b[38;5;124m\"\u001b[39m, node\u001b[38;5;241m.\u001b[39mstart_mark,\n\u001b[1;32m    142\u001b[0m                 \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfound unhashable key\u001b[39m\u001b[38;5;124m\"\u001b[39m, key_node\u001b[38;5;241m.\u001b[39mstart_mark)\n\u001b[0;32m--> 143\u001b[0m     value \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconstruct_object\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalue_node\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdeep\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdeep\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    144\u001b[0m     mapping[key] \u001b[38;5;241m=\u001b[39m value\n\u001b[1;32m    145\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m mapping\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/constructor.py:100\u001b[0m, in \u001b[0;36mBaseConstructor.construct_object\u001b[0;34m(self, node, deep)\u001b[0m\n\u001b[1;32m     98\u001b[0m             constructor \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\u001b[38;5;241m.\u001b[39mconstruct_mapping\n\u001b[1;32m     99\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m tag_suffix \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 100\u001b[0m     data \u001b[38;5;241m=\u001b[39m \u001b[43mconstructor\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnode\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    101\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    102\u001b[0m     data \u001b[38;5;241m=\u001b[39m constructor(\u001b[38;5;28mself\u001b[39m, tag_suffix, node)\n",
      "File \u001b[0;32m/opt/anaconda3/envs/pysindy_faster/lib/python3.12/site-packages/yaml/constructor.py:427\u001b[0m, in \u001b[0;36mSafeConstructor.construct_undefined\u001b[0;34m(self, node)\u001b[0m\n\u001b[1;32m    426\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mconstruct_undefined\u001b[39m(\u001b[38;5;28mself\u001b[39m, node):\n\u001b[0;32m--> 427\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m ConstructorError(\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[1;32m    428\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcould not determine a constructor for the tag \u001b[39m\u001b[38;5;132;01m%r\u001b[39;00m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m%\u001b[39m node\u001b[38;5;241m.\u001b[39mtag,\n\u001b[1;32m    429\u001b[0m             node\u001b[38;5;241m.\u001b[39mstart_mark)\n",
      "\u001b[0;31mConstructorError\u001b[0m: could not determine a constructor for the tag 'tag:yaml.org,2002:python/name:__main__.<lambda>'\n  in \"functions.yaml\", line 25, column 17"
     ]
    }
   ],
   "source": [
    "# Custom serialization to convert lambda functions to strings\n",
    "def serialize_lambda(data):\n",
    "    serialized = {}\n",
    "    for key, value in data.items():\n",
    "        if callable(value):\n",
    "            serialized[key] = value.__code__.co_code  # Store code\n",
    "        else:\n",
    "            serialized[key] = value\n",
    "    return serialized\n",
    "\n",
    "# Custom deserialization\n",
    "def deserialize_lambda(data):\n",
    "    deserialized = {}\n",
    "    for key, value in data.items():\n",
    "        if isinstance(value, bytes):  # Check if it's a stored code object\n",
    "            deserialized[key] = eval('lambda x, y: x + y')  # Placeholder, adjust accordingly\n",
    "        else:\n",
    "            deserialized[key] = value\n",
    "    return deserialized\n",
    "\n",
    "# Serialize the data\n",
    "serialized_data = serialize_lambda(ode_systems)\n",
    "\n",
    "# Save to YAML\n",
    "with open('functions.yaml', 'w') as file:\n",
    "    yaml.dump(serialized_data, file)\n",
    "\n",
    "# Load from YAML\n",
    "with open('functions.yaml', 'r') as file:\n",
    "    loaded_data = yaml.safe_load(file)\n",
    "\n",
    "# Deserialize the data\n",
    "deserialized_data = deserialize_lambda(loaded_data)\n",
    "\n",
    "# # Test the functions\n",
    "# result_add = deserialized_data['add'](2, 3)  # Should return 5\n",
    "# result_subtract = deserialized_data['subtract'](5, 3)  # Should return 2\n",
    "\n",
    "# print(\"Addition result:\", result_add)\n",
    "# print(\"Subtraction result:\", result_subtract)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
